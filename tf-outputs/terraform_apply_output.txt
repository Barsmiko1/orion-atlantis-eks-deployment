michaeljohn@Michaels-MacBook-Pro orion-atlantis-eks-deployment % terraform apply -var-file=terraform.tfvars
module.iam_roles.data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Reading...
module.iam_roles.data.aws_caller_identity.current: Read complete after 1s [id=443370674281]
data.aws_caller_identity.current: Read complete after 1s [id=443370674281]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_eks_addon.ebs_csi_driver will be created
  + resource "aws_eks_addon" "ebs_csi_driver" {
      + addon_name               = "aws-ebs-csi-driver"
      + addon_version            = (known after apply)
      + arn                      = (known after apply)
      + cluster_name             = "atlantis-cluster"
      + configuration_values     = (known after apply)
      + created_at               = (known after apply)
      + id                       = (known after apply)
      + modified_at              = (known after apply)
      + service_account_role_arn = (known after apply)
      + tags_all                 = (known after apply)
    }

  # aws_iam_role.ebs_csi_driver will be created
  + resource "aws_iam_role" "ebs_csi_driver" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "atlantis-cluster-ebs-csi-driver"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.ebs_csi_driver will be created
  + resource "aws_iam_role_policy_attachment" "ebs_csi_driver" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      + role       = "atlantis-cluster-ebs-csi-driver"
    }

  # kubernetes_annotations.ebs_default will be created
  + resource "kubernetes_annotations" "ebs_default" {
      + annotations   = {
          + "storageclass.kubernetes.io/is-default-class" = "true"
        }
      + api_version   = "storage.k8s.io/v1"
      + field_manager = "Terraform"
      + id            = (known after apply)
      + kind          = "StorageClass"

      + metadata {
          + name = "ebs-sc"
        }
    }

  # kubernetes_storage_class.ebs will be created
  + resource "kubernetes_storage_class" "ebs" {
      + allow_volume_expansion = true
      + id                     = (known after apply)
      + parameters             = {
          + "fsType" = "ext4"
          + "type"   = "gp3"
        }
      + reclaim_policy         = "Retain"
      + storage_provisioner    = "ebs.csi.aws.com"
      + volume_binding_mode    = "WaitForFirstConsumer"

      + metadata {
          + generation       = (known after apply)
          + name             = "ebs-sc"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.atlantis.data.kubernetes_service.atlantis will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "kubernetes_service" "atlantis" {
      + id     = (known after apply)
      + spec   = (known after apply)
      + status = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "atlantis"
          + namespace        = "atlantis"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.atlantis.helm_release.atlantis will be created
  + resource "helm_release" "atlantis" {
      + atomic                     = false
      + chart                      = "atlantis"
      + cleanup_on_fail            = false
      + create_namespace           = false
      + dependency_update          = false
      + disable_crd_hooks          = false
      + disable_openapi_validation = false
      + disable_webhooks           = false
      + force_update               = false
      + id                         = (known after apply)
      + lint                       = false
      + manifest                   = (known after apply)
      + max_history                = 0
      + metadata                   = (known after apply)
      + name                       = "atlantis"
      + namespace                  = "atlantis"
      + pass_credentials           = false
      + recreate_pods              = false
      + render_subchart_notes      = true
      + replace                    = false
      + repository                 = "https://runatlantis.github.io/helm-charts"
      + reset_values               = false
      + reuse_values               = false
      + skip_crds                  = false
      + status                     = "deployed"
      + timeout                    = 900
      + values                     = [
          + (sensitive value),
        ]
      + verify                     = false
      + version                    = "5.17.2"
      + wait                       = true
      + wait_for_jobs              = false
    }

  # module.atlantis.kubernetes_namespace.atlantis will be created
  + resource "kubernetes_namespace" "atlantis" {
      + id                               = (known after apply)
      + wait_for_default_service_account = false

      + metadata {
          + generation       = (known after apply)
          + name             = "atlantis"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.atlantis.kubernetes_secret.atlantis_github will be created
  + resource "kubernetes_secret" "atlantis_github" {
      + data                           = (sensitive value)
      + id                             = (known after apply)
      + type                           = "Opaque"
      + wait_for_service_account_token = true

      + metadata {
          + generation       = (known after apply)
          + name             = "atlantis-github"
          + namespace        = "atlantis"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # module.eks.data.tls_certificate.eks will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "eks" {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.eks.aws_eks_cluster.this will be created
  + resource "aws_eks_cluster" "this" {
      + arn                           = (known after apply)
      + bootstrap_self_managed_addons = true
      + certificate_authority         = (known after apply)
      + cluster_id                    = (known after apply)
      + created_at                    = (known after apply)
      + endpoint                      = (known after apply)
      + id                            = (known after apply)
      + identity                      = (known after apply)
      + name                          = "atlantis-cluster"
      + platform_version              = (known after apply)
      + role_arn                      = (known after apply)
      + status                        = (known after apply)
      + tags_all                      = (known after apply)
      + version                       = (known after apply)

      + access_config (known after apply)

      + kubernetes_network_config (known after apply)

      + upgrade_policy (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.this will be created
  + resource "aws_eks_node_group" "this" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "atlantis-cluster"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t3.medium",
        ]
      + node_group_name        = "atlantis-cluster-node-group"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags_all               = (known after apply)
      + version                = (known after apply)

      + node_repair_config (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 2
          + min_size     = 1
        }

      + update_config (known after apply)
    }

  # module.eks.aws_iam_openid_connect_provider.eks will be created
  + resource "aws_iam_openid_connect_provider" "eks" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.eks.aws_iam_role.cluster will be created
  + resource "aws_iam_role" "cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "atlantis-cluster-cluster-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.node will be created
  + resource "aws_iam_role" "node" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "atlantis-cluster-node-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "atlantis-cluster-cluster-role"
    }

  # module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceController will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSVPCResourceController" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = "atlantis-cluster-cluster-role"
    }

  # module.eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "atlantis-cluster-node-role"
    }

  # module.eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "atlantis-cluster-node-role"
    }

  # module.eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "atlantis-cluster-node-role"
    }

  # module.iam_roles.aws_iam_role.eks_admin will be created
  + resource "aws_iam_role" "eks_admin" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::443370674281:root"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "atlantis-cluster-eks-admin"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.iam_roles.aws_iam_role.eks_readonly will be created
  + resource "aws_iam_role" "eks_readonly" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::443370674281:root"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "atlantis-cluster-eks-readonly"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.iam_roles.aws_iam_role_policy.eks_admin will be created
  + resource "aws_iam_role_policy" "eks_admin" {
      + id          = (known after apply)
      + name        = "atlantis-cluster-eks-admin-policy"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "eks:*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = (known after apply)
    }

  # module.iam_roles.aws_iam_role_policy.eks_readonly will be created
  + resource "aws_iam_role_policy" "eks_readonly" {
      + id          = (known after apply)
      + name        = "atlantis-cluster-eks-readonly-policy"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "eks:DescribeCluster",
                          + "eks:ListClusters",
                          + "eks:DescribeNodegroup",
                          + "eks:ListNodegroups",
                          + "eks:ListFargateProfiles",
                          + "eks:ListAddons",
                          + "eks:DescribeAddon",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = (known after apply)
    }

  # module.iam_roles.kubernetes_cluster_role_binding.admin will be created
  + resource "kubernetes_cluster_role_binding" "admin" {
      + id = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "eks-admin-binding"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + role_ref {
          + api_group = "rbac.authorization.k8s.io"
          + kind      = "ClusterRole"
          + name      = "cluster-admin"
        }

      + subject {
          + api_group = "rbac.authorization.k8s.io"
          + kind      = "User"
          + name      = "eks-admin"
          + namespace = "default"
        }
    }

  # module.iam_roles.kubernetes_cluster_role_binding.readonly will be created
  + resource "kubernetes_cluster_role_binding" "readonly" {
      + id = (known after apply)

      + metadata {
          + generation       = (known after apply)
          + name             = "eks-readonly-binding"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + role_ref {
          + api_group = "rbac.authorization.k8s.io"
          + kind      = "ClusterRole"
          + name      = "view"
        }

      + subject {
          + api_group = "rbac.authorization.k8s.io"
          + kind      = "User"
          + name      = "eks-readonly"
          + namespace = "default"
        }
    }

  # module.vpc.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "atlantis-vpc-nat-eip-0"
        }
      + tags_all             = {
          + "Name" = "atlantis-vpc-nat-eip-0"
        }
      + vpc                  = (known after apply)
    }

  # module.vpc.aws_eip.nat[1] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "atlantis-vpc-nat-eip-1"
        }
      + tags_all             = {
          + "Name" = "atlantis-vpc-nat-eip-1"
        }
      + vpc                  = (known after apply)
    }

  # module.vpc.aws_internet_gateway.this will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "atlantis-vpc-igw"
        }
      + tags_all = {
          + "Name" = "atlantis-vpc-igw"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.this[0] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "atlantis-vpc-nat-0"
        }
      + tags_all                           = {
          + "Name" = "atlantis-vpc-nat-0"
        }
    }

  # module.vpc.aws_nat_gateway.this[1] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "atlantis-vpc-nat-1"
        }
      + tags_all                           = {
          + "Name" = "atlantis-vpc-nat-1"
        }
    }

  # module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "atlantis-vpc-private-rt-0"
        }
      + tags_all         = {
          + "Name" = "atlantis-vpc-private-rt-0"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.private[1] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "atlantis-vpc-private-rt-1"
        }
      + tags_all         = {
          + "Name" = "atlantis-vpc-private-rt-1"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "atlantis-vpc-public-rt"
        }
      + tags_all         = {
          + "Name" = "atlantis-vpc-public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                   = "atlantis-vpc-private-0"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/internal-elb"        = "1"
        }
      + tags_all                                       = {
          + "Name"                                   = "atlantis-vpc-private-0"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/internal-elb"        = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                   = "atlantis-vpc-private-1"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/internal-elb"        = "1"
        }
      + tags_all                                       = {
          + "Name"                                   = "atlantis-vpc-private-1"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/internal-elb"        = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.101.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                   = "atlantis-vpc-public-0"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/elb"                 = "1"
        }
      + tags_all                                       = {
          + "Name"                                   = "atlantis-vpc-public-0"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/elb"                 = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.102.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name"                                   = "atlantis-vpc-public-1"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/elb"                 = "1"
        }
      + tags_all                                       = {
          + "Name"                                   = "atlantis-vpc-public-1"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
          + "kubernetes.io/role/elb"                 = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.this will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name"                                   = "atlantis-vpc"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
        }
      + tags_all                             = {
          + "Name"                                   = "atlantis-vpc"
          + "kubernetes.io/cluster/atlantis-cluster" = "shared"
        }
    }

Plan: 41 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + atlantis_url                  = (known after apply)
  + eks_admin_role_arn            = (known after apply)
  + eks_cluster_endpoint          = (known after apply)
  + eks_cluster_name              = "atlantis-cluster"
  + eks_cluster_security_group_id = (known after apply)
  + eks_readonly_role_arn         = (known after apply)
  + private_subnet_ids            = [
      + (known after apply),
      + (known after apply),
    ]
  + public_subnet_ids             = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id                        = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.aws_eip.nat[1]: Creating...
module.eks.aws_iam_role.node: Creating...
module.eks.aws_iam_role.cluster: Creating...
module.vpc.aws_eip.nat[0]: Creating...
module.iam_roles.aws_iam_role.eks_readonly: Creating...
module.iam_roles.aws_iam_role.eks_admin: Creating...
module.vpc.aws_vpc.this: Creating...
module.iam_roles.aws_iam_role.eks_admin: Creation complete after 1s [id=atlantis-cluster-eks-admin]
module.eks.aws_iam_role.node: Creation complete after 1s [id=atlantis-cluster-node-role]
module.eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy: Creating...
module.iam_roles.aws_iam_role_policy.eks_admin: Creating...
module.eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy: Creating...
module.eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly: Creating...
module.eks.aws_iam_role.cluster: Creation complete after 1s [id=atlantis-cluster-cluster-role]
module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceController: Creating...
module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy: Creating...
module.iam_roles.aws_iam_role.eks_readonly: Creation complete after 2s [id=atlantis-cluster-eks-readonly]
module.iam_roles.aws_iam_role_policy.eks_readonly: Creating...
module.eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy: Creation complete after 1s [id=atlantis-cluster-node-role-20250523061648721700000001]
module.eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly: Creation complete after 1s [id=atlantis-cluster-node-role-20250523061648732300000002]
module.eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy: Creation complete after 1s [id=atlantis-cluster-node-role-20250523061648735100000003]
module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy: Creation complete after 1s [id=atlantis-cluster-cluster-role-20250523061648915000000004]
module.eks.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceController: Creation complete after 1s [id=atlantis-cluster-cluster-role-20250523061648946900000005]
module.iam_roles.aws_iam_role_policy.eks_admin: Creation complete after 1s [id=atlantis-cluster-eks-admin:atlantis-cluster-eks-admin-policy]
module.iam_roles.aws_iam_role_policy.eks_readonly: Creation complete after 0s [id=atlantis-cluster-eks-readonly:atlantis-cluster-eks-readonly-policy]
module.vpc.aws_eip.nat[1]: Creation complete after 2s [id=eipalloc-0e0f85ffa996dfd32]
module.vpc.aws_eip.nat[0]: Creation complete after 2s [id=eipalloc-081427dcd1078e3bb]
module.vpc.aws_vpc.this: Still creating... [10s elapsed]
module.vpc.aws_vpc.this: Creation complete after 15s [id=vpc-06285b0d3d2c7d4d8]
module.vpc.aws_internet_gateway.this: Creating...
module.vpc.aws_subnet.public[1]: Creating...
module.vpc.aws_subnet.private[0]: Creating...
module.vpc.aws_subnet.public[0]: Creating...
module.vpc.aws_subnet.private[1]: Creating...
module.vpc.aws_internet_gateway.this: Creation complete after 1s [id=igw-08619361cc58c7eb2]
module.vpc.aws_route_table.public: Creating...
module.vpc.aws_subnet.private[1]: Creation complete after 1s [id=subnet-0aabce86ce77c870d]
module.vpc.aws_subnet.private[0]: Creation complete after 1s [id=subnet-04ce4167de72f92df]
module.eks.aws_eks_cluster.this: Creating...
module.vpc.aws_route_table.public: Creation complete after 3s [id=rtb-0564e8089de5ed94f]
module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [10s elapsed]
module.vpc.aws_subnet.public[1]: Creation complete after 12s [id=subnet-0087f691e82730773]
module.vpc.aws_subnet.public[0]: Creation complete after 14s [id=subnet-0744d8a2620ad3daf]
module.vpc.aws_route_table_association.public[0]: Creating...
module.vpc.aws_route_table_association.public[1]: Creating...
module.vpc.aws_nat_gateway.this[1]: Creating...
module.vpc.aws_nat_gateway.this[0]: Creating...
module.vpc.aws_route_table_association.public[1]: Creation complete after 0s [id=rtbassoc-06f8c6e14f0b79843]
module.vpc.aws_route_table_association.public[0]: Creation complete after 1s [id=rtbassoc-0b6d38da405ce3797]
module.eks.aws_eks_cluster.this: Still creating... [20s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [10s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [10s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [30s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [20s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [20s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [40s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [30s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [30s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [50s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [40s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [40s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [1m0s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [50s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [50s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [1m10s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m0s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m0s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [1m20s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m10s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m10s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [1m30s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m20s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m20s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [1m40s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m30s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m30s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [1m50s elapsed]
module.vpc.aws_nat_gateway.this[0]: Still creating... [1m40s elapsed]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m40s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [2m0s elapsed]
module.vpc.aws_nat_gateway.this[0]: Creation complete after 1m48s [id=nat-02ba4f9b65698fcab]
module.vpc.aws_nat_gateway.this[1]: Still creating... [1m50s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [2m10s elapsed]
module.vpc.aws_nat_gateway.this[1]: Creation complete after 1m58s [id=nat-0f490b4df671bb615]
module.vpc.aws_route_table.private[1]: Creating...
module.vpc.aws_route_table.private[0]: Creating...
module.vpc.aws_route_table.private[1]: Creation complete after 2s [id=rtb-01c56a636dd553d36]
module.vpc.aws_route_table.private[0]: Creation complete after 2s [id=rtb-0fc1214bbe97f90fe]
module.vpc.aws_route_table_association.private[0]: Creating...
module.vpc.aws_route_table_association.private[1]: Creating...
module.vpc.aws_route_table_association.private[0]: Creation complete after 1s [id=rtbassoc-084ee60a66bc4f51a]
module.vpc.aws_route_table_association.private[1]: Creation complete after 1s [id=rtbassoc-0ea6242d4dd135ee1]
module.eks.aws_eks_cluster.this: Still creating... [2m20s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [2m30s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [2m40s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [2m50s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [3m0s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [3m10s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [3m20s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [3m30s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [3m40s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [3m50s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [4m0s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [4m10s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [4m20s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [4m30s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [4m40s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [4m50s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [5m0s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [5m10s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [5m20s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [5m30s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [5m40s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [5m50s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [6m0s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [6m10s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [6m20s elapsed]
module.eks.aws_eks_cluster.this: Still creating... [6m30s elapsed]
module.eks.aws_eks_cluster.this: Creation complete after 6m32s [id=atlantis-cluster]
module.eks.data.tls_certificate.eks: Reading...
module.eks.aws_eks_node_group.this: Creating...
aws_iam_role.ebs_csi_driver: Creating...
module.iam_roles.kubernetes_cluster_role_binding.readonly: Creating...
module.iam_roles.kubernetes_cluster_role_binding.admin: Creating...
module.eks.data.tls_certificate.eks: Read complete after 1s [id=213644035344c59e44dd4b37f3e17ae888eed9e0]
module.eks.aws_iam_openid_connect_provider.eks: Creating...
module.eks.aws_iam_openid_connect_provider.eks: Creation complete after 1s [id=arn:aws:iam::443370674281:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/3A85404507F2F7E5000E7B27379C9936]
aws_iam_role.ebs_csi_driver: Creation complete after 2s [id=atlantis-cluster-ebs-csi-driver]
aws_iam_role_policy_attachment.ebs_csi_driver: Creating...
aws_iam_role_policy_attachment.ebs_csi_driver: Creation complete after 0s [id=atlantis-cluster-ebs-csi-driver-2025052306233794290000000c]
aws_eks_addon.ebs_csi_driver: Creating...
module.iam_roles.kubernetes_cluster_role_binding.admin: Creation complete after 4s [id=eks-admin-binding]
module.iam_roles.kubernetes_cluster_role_binding.readonly: Creation complete after 4s [id=eks-readonly-binding]
module.eks.aws_eks_node_group.this: Still creating... [10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [10s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [20s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [30s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [40s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [50s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [1m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [1m0s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [1m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [1m10s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [1m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [1m20s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [1m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [1m30s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [1m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [1m40s elapsed]
module.eks.aws_eks_node_group.this: Still creating... [1m50s elapsed]
module.eks.aws_eks_node_group.this: Creation complete after 1m51s [id=atlantis-cluster:atlantis-cluster-node-group]
aws_eks_addon.ebs_csi_driver: Still creating... [1m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [2m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [2m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [2m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [2m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [2m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [2m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [3m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [3m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [3m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [3m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [3m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [3m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [4m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [4m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [4m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [4m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [4m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [4m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [5m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [5m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [5m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [5m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [5m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [5m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [6m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [6m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [6m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [6m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [6m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [6m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [7m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [7m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [7m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [7m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [7m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [7m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [8m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [8m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [8m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [8m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [8m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [8m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [9m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [9m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [9m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [9m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [9m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [9m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [10m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [10m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [10m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [10m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [10m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [10m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [11m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [11m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [11m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [11m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [11m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [11m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [12m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [12m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [12m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [12m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [12m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [12m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [13m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [13m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [13m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [13m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [13m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [13m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [14m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [14m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [14m20s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [14m30s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [14m40s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [14m50s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [15m0s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [15m10s elapsed]
aws_eks_addon.ebs_csi_driver: Still creating... [15m20s elapsed]
aws_eks_addon.ebs_csi_driver: Creation complete after 15m28s [id=atlantis-cluster:aws-ebs-csi-driver]
kubernetes_storage_class.ebs: Creating...
kubernetes_storage_class.ebs: Creation complete after 4s [id=ebs-sc]
kubernetes_annotations.ebs_default: Creating...
module.atlantis.kubernetes_namespace.atlantis: Creating...
module.atlantis.kubernetes_namespace.atlantis: Creation complete after 1s [id=atlantis]
module.atlantis.kubernetes_secret.atlantis_github: Creating...
module.atlantis.kubernetes_secret.atlantis_github: Creation complete after 0s [id=atlantis/atlantis-github]
kubernetes_annotations.ebs_default: Creation complete after 2s [id=apiVersion=storage.k8s.io/v1,kind=StorageClass,name=ebs-sc]
module.atlantis.helm_release.atlantis: Creating...
module.atlantis.helm_release.atlantis: Still creating... [10s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [20s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [30s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [40s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [50s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [1m0s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [1m10s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [1m20s elapsed]
module.atlantis.helm_release.atlantis: Still creating... [1m30s elapsed]
module.atlantis.helm_release.atlantis: Creation complete after 1m38s [id=atlantis]
module.atlantis.data.kubernetes_service.atlantis: Reading...
module.atlantis.data.kubernetes_service.atlantis: Read complete after 1s [id=atlantis/atlantis]

Apply complete! Resources: 41 added, 0 changed, 0 destroyed.

Outputs:

atlantis_url = "http://a6dc0015d8b884c6ca154df51c95b723-1030382273.us-west-2.elb.amazonaws.com"
eks_admin_role_arn = "arn:aws:iam::443370674281:role/atlantis-cluster-eks-admin"
eks_cluster_endpoint = "https://3A85404507F2F7E5000E7B27379C9936.sk1.us-west-2.eks.amazonaws.com"
eks_cluster_name = "atlantis-cluster"
eks_cluster_security_group_id = "sg-0df2deaf2311b89a0"
eks_readonly_role_arn = "arn:aws:iam::443370674281:role/atlantis-cluster-eks-readonly"
private_subnet_ids = [
  "subnet-04ce4167de72f92df",
  "subnet-0aabce86ce77c870d",
]
public_subnet_ids = [
  "subnet-0744d8a2620ad3daf",
  "subnet-0087f691e82730773",
]
vpc_id = "vpc-06285b0d3d2c7d4d8" 